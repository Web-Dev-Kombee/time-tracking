// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String           @unique
  password      String?
  image         String?
  role          UserRole         @default(USER)
  subscription  SubscriptionTier @default(FREE)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  clients       Client[]
  projects      Project[]
  timeEntries   TimeEntry[]
  expenses      Expense[]
  invoices      Invoice[]
  accounts      Account[]
  sessions      Session[]
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id           String    @id @default(cuid())
  name         String
  email        String?
  phone        String?
  address      String?
  notes        String?
  createdById  String
  createdBy    User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  projects     Project[]
  invoices     Invoice[]
}

model Project {
  id           String        @id @default(cuid())
  name         String
  description  String?
  status       ProjectStatus @default(ACTIVE)
  clientId     String
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdById  String
  createdBy    User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  timeEntries  TimeEntry[]
  expenses     Expense[]
  invoiceItems InvoiceItem[]
  hourlyRate   Float         @default(0)
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

model TimeEntry {
  id            String       @id @default(cuid())
  description   String?
  startTime     DateTime
  endTime       DateTime?
  projectId     String
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  invoiceId     String?
  invoiceItem   InvoiceItem? @relation(fields: [invoiceItemId], references: [id])
  invoiceItemId String?
  billable      Boolean      @default(true)
}

model Expense {
  id            String       @id @default(cuid())
  description   String
  amount        Float
  date          DateTime
  receipt       String?
  billable      Boolean      @default(true)
  projectId     String
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  invoiceId     String?
  invoiceItem   InvoiceItem? @relation(fields: [invoiceItemId], references: [id])
  invoiceItemId String?
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  clientId      String
  client        Client        @relation(fields: [clientId], references: [id])
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  issueDate     DateTime
  dueDate       DateTime
  status        InvoiceStatus @default(DRAFT)
  notes         String?
  items         InvoiceItem[]
  payments      Payment[]
  subtotal      Float
  tax           Float
  total         Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

model InvoiceItem {
  id          String      @id @default(cuid())
  invoiceId   String
  invoice     Invoice     @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  description String
  quantity    Float
  unitPrice   Float
  amount      Float
  projectId   String?
  project     Project?    @relation(fields: [projectId], references: [id])
  type        ItemType    @default(SERVICE)
  timeEntries TimeEntry[]
  expenses    Expense[]
}

enum ItemType {
  SERVICE
  EXPENSE
  PRODUCT
}

model Payment {
  id          String        @id @default(cuid())
  invoiceId   String
  invoice     Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  amount      Float
  date        DateTime
  method      PaymentMethod
  reference   String?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  STRIPE
  PAYPAL
  CASH
  OTHER
}
