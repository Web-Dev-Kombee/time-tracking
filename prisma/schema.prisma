generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String      @id @default(cuid())
  name         String?
  email        String      @unique
  password     String?
  image        String?
  role         String      @default("USER")
  subscription String      @default("FREE")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  accounts     Account[]
  clients      Client[]
  expenses     Expense[]
  invoices     Invoice[]
  projects     Project[]
  sessions     Session[]
  timeEntries  TimeEntry[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  notes       String?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  invoices    Invoice[]
  projects    Project[]
}

model Project {
  id           String        @id @default(cuid())
  name         String
  description  String?
  status       String        @default("ACTIVE")
  clientId     String
  createdById  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  hourlyRate   Float         @default(0)
  expenses     Expense[]
  invoiceItems InvoiceItem[]
  createdBy    User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  timeEntries  TimeEntry[]
}

model TimeEntry {
  id            String       @id @default(cuid())
  description   String?
  startTime     DateTime
  endTime       DateTime?
  projectId     String
  userId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  invoiceId     String?
  invoiceItemId String?
  billable      Boolean      @default(true)
  invoiceItem   InvoiceItem? @relation(fields: [invoiceItemId], references: [id])
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Expense {
  id            String       @id @default(cuid())
  description   String
  amount        Float
  date          DateTime
  receipt       String?
  billable      Boolean      @default(true)
  projectId     String
  userId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  invoiceId     String?
  invoiceItemId String?
  invoiceItem   InvoiceItem? @relation(fields: [invoiceItemId], references: [id])
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  clientId      String
  userId        String
  issueDate     DateTime
  dueDate       DateTime
  status        String        @default("DRAFT")
  notes         String?
  subtotal      Float
  tax           Float
  total         Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  client        Client        @relation(fields: [clientId], references: [id])
  items         InvoiceItem[]
  payments      Payment[]
}

model InvoiceItem {
  id          String      @id @default(cuid())
  invoiceId   String
  description String
  quantity    Float
  unitPrice   Float
  amount      Float
  projectId   String?
  type        String      @default("SERVICE")
  expenses    Expense[]
  project     Project?    @relation(fields: [projectId], references: [id])
  invoice     Invoice     @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  timeEntries TimeEntry[]
}

model Payment {
  id        String   @id @default(cuid())
  invoiceId String
  amount    Float
  date      DateTime
  method    String
  reference String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}
